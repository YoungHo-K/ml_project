import os
import numpy as np

from utils.utils import read_file_to_bytes


class InterpolatedEntropyFeature:
    def __init__(self, window_size=1024, stride=512, number_of_features=100):
        self.window_size = window_size
        self.stride = stride
        self.number_of_features = number_of_features

    def generate(self, file_path=None):
        if (file_path is None) or (not os.path.isfile(file_path)):
            raise Exception("[ERROR] Invalid file path.")

        byte_sequence = read_file_to_bytes(file_path)
        byte_window_list = self._get_byte_windows(byte_sequence)
        entropy_sequence = self._get_entropy_sequence(byte_window_list)
        interpolated_entropy_sequence = self._get_interpolated_entropy_sequence(entropy_sequence)

        return interpolated_entropy_sequence

    def _get_byte_windows(self, byte_sequence):
        byte_window_list = list()
        for index in range(0, len(byte_sequence) - self.window_size + 1, self.stride):
            window = byte_sequence[index: index + 1]

            byte_window_list.append(window)

        return byte_window_list

    def _get_entropy_sequence(self, byte_window_list):
        entropy_sequence = list()
        for byte_window in byte_window_list:
            frequency_window = [0] * 256

            for byte in byte_window:
                frequency_window[byte] += 1

            entropy = self._get_entropy(frequency_window)
            entropy_sequence.append(entropy)

        return entropy_sequence

    def _get_entropy(self, frequency_window):
        entropy = 0
        for frequency in frequency_window:
            probability = frequency / self.window_size

            entropy += probability * np.log2(probability + 1e-10)

        return -entropy

    def _get_interpolated_entropy_sequence(self, entropy_sequence):
        interpolated_entropy_sequence = np.interp(np.linspace(0, len(entropy_sequence) - 1, self.number_of_features),
                                                  range(0, len(entropy_sequence)),
                                                  entropy_sequence)

        return interpolated_entropy_sequence
